1. Why choose a HashMap for storing product information?
    Efficiency: HashMap provides constant time complexity O(1) for adding and retrieving products by ID, which is faster than using other data structures like a List.
    Uniqueness: HashMap allows us to enforce unique product IDs, which simplifies the task of ensuring no duplicate IDs.

2. How does using an ArrayList for daily shipments help maintain order?
    Order Preservation: ArrayList maintains elements in the order they are added, making it ideal for tracking the sequence of arrivals. This is important for inventory tracking, as shipments need to reflect the actual order they were received.

3. What if products need to be sorted by both name and ID?
    Custom Comparator: We can use a Comparator that first compares by name and then by ID if names are equal. Sorting could be implemented as:
    java
    productList.sort(Comparator.comparing(Product::getName).thenComparing(Product::getId));

4. What changes if products have non-unique IDs or shipments need timestamps?
    Non-Unique IDs: If IDs are not unique, using a HashMap may not work, as it requires unique keys. We could use a List<Product> for all products, and filter results when searching by ID.
    Timestamped Shipments: If shipments require timestamps, a LinkedHashMap<Integer, Timestamp> could store product IDs with arrival times, preserving insertion order and allowing quick lookup with timestamps.
